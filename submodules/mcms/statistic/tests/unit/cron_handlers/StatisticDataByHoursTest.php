<?php
namespace mcms\statistic\tests\unit\statistic;

use mcms\common\codeception\TestCase;
use mcms\statistic\components\cron\CronParams;
use mcms\statistic\components\cron\handlers\StatisticDataByHours;
use mcms\statistic\Module;
use yii\db\Expression;
use yii\db\Query;
use Yii;

class StatisticDataByHoursTest extends TestCase
{

  public function _fixtures()
  {
    return $this->convertFixtures([
      'statistic.statistic_data_by_hours_subscriptions',
      'statistic.statistic_data_by_hours_subscription_offs',
      'statistic.statistic_data_by_hours_subscription_rebills',
    ]);
  }

  public function testOffs()
  {
    $fromTimeParam = strtotime('2017-01-01');

    $this->truncate();
    $handler = new StatisticDataByHours([
      'params' => new CronParams([
        'fromTime' => $fromTimeParam,
      ]),
    ]);
    $handler->run();

    $this->truncate();
    $handler = new StatisticDataByHours([
      'params' => new CronParams([
        'fromTime' => strtotime('2017-01-01'),
      ]),
    ]);
    $handler->run();

    // Отписки за 2017-01-01 должны быть сгруппированы, count_scope_offs должно содержать две отписки
    $this->assertEquals(
      2,
      (new Query())
        ->from('statistic_data_hour_group')
        ->andWhere(['date' => '2017-01-01'])
        ->andWhere(['operator_id' => 1])
        ->sum('count_scope_offs'),
      'Unsubscribe for 2017-01-01 not grouped'
    );
    // Отписки за 2017-01-01 с различными операторами не должны быть сгруппированы
    $this->assertEquals(
      2,
      (new Query())
        ->from('statistic_data_hour_group')
        ->andWhere(['date' => '2017-01-01'])
        ->andWhere(['operator_id' => [2, 3]])
        ->count(),
      'Unsubscribe for 2017-01-01 with various operators should not be grouped'
    );
    // Должно быть 2 отписки за 2017-01-02 за 24 часа.
    // Если же попало 3 отписки, значит в результат попала отписка, которая была сделана на 25 часе, хотя у нас ограничение отписки за 24 часа
    $this->assertEquals(
      2,
      (new Query())
        ->from('statistic_data_hour_group')
        ->andWhere(['date' => '2017-01-02'])
        ->sum('count_scope_offs'),
      'Unsubscribe 2017-01-02 for counted wrong, wrong take into account the period of 24 hours'
    );
    // Неверное количество данных сгенерированных хэндлером
    $this->assertEquals(
      5,
      (new Query())->from('statistic_data_hour_group')->count(),
      'The wrong amount of data generated by the handler'
    );
    // ну типа выкупили :D
    Yii::$app->db->createCommand('UPDATE subscription_offs SET is_cpa=0 WHERE hit_id=5')->execute();
    Yii::$app->db->createCommand('UPDATE subscriptions SET is_cpa=0 WHERE hit_id=5')->execute();

    $handler = new StatisticDataByHours([
      'params' => new CronParams([
        'fromTime' => strtotime('2017-01-01'),
      ]),
    ]);
    $handler->run();

    // Отписки за 2017-01-01 должны быть сгруппированы, count_scope_offs должно содержать две отписки
    $this->assertEquals(
      2,
      (new Query())
        ->from('statistic_data_hour_group')
        ->andWhere(['date' => '2017-01-01'])
        ->andWhere(['operator_id' => 1])
        ->sum('count_scope_offs'),
      'Unsubscribe for 2017-01-01 not grouped'
    );
    // Отписки за 2017-01-01 с различными операторами не должны быть сгруппированы
    $this->assertEquals(
      2,
      (new Query())
        ->from('statistic_data_hour_group')
        ->andWhere(['date' => '2017-01-01'])
        ->andWhere(['operator_id' => [2, 3]])
        ->count(),
      'Unsubscribe for 2017-01-01 with various operators should not be grouped'
    );

    // Должно быть 2 отписки за 2017-01-02 за 24 часа.
    // Если же попало 3 отписки, значит в результат попала отписка, которая была сделана на 25 часе, хотя у нас ограничение отписки за 24 часа
    $this->assertEquals(
      2,
      (new Query())
        ->from('statistic_data_hour_group')
        ->andWhere(['date' => '2017-01-02'])
        ->sum('count_scope_offs'),
      'Unsubscribe 2017-01-02 for counted wrong, wrong take into account the period of 24 hours'
    );

    // Неверное количество данных сгенерированных хэндлером
    $this->assertEquals(
      5,
      (new Query())->from('statistic_data_hour_group')->count(),
      'The wrong amount of data generated by the handler'
    );
  }


  public function testRebills()
  {
    $this->truncate();
    $handler = new StatisticDataByHours([
      'params' => new CronParams([
        'fromTime' => strtotime('2017-01-01'),
      ]),
    ]);
    $handler->run();

    $data = (new Query())
      ->select([
        'count_rebills_date_by_date' => new Expression('SUM(count_rebills_date_by_date)'),
        'sum_profit_rub_date_by_date' => new Expression('SUM(sum_profit_rub_date_by_date)'),
        'sum_profit_usd_date_by_date' => new Expression('SUM(sum_profit_usd_date_by_date)'),
        'sum_profit_eur_date_by_date' => new Expression('SUM(sum_profit_eur_date_by_date)'),
      ])
      ->from('statistic_data_hour_group')
      ->one();
    $this->assertEquals(2, $data['count_rebills_date_by_date'], 'Ребиллы некорректно посчитались');
    $this->assertEquals(240, $data['sum_profit_rub_date_by_date'], 'Профиты некорректно посчитались');
    $this->assertEquals(4, $data['sum_profit_usd_date_by_date'], 'Профиты некорректно посчитались');
    $this->assertEquals(3.8, $data['sum_profit_eur_date_by_date'], 'Профиты некорректно посчитались');

    // ну типа выкупили :D
    Yii::$app->db->createCommand('UPDATE subscription_rebills SET is_cpa=0 WHERE hit_id=7')->execute();
    Yii::$app->db->createCommand('UPDATE subscriptions SET is_cpa=0 WHERE hit_id=7')->execute();

    $handler = new StatisticDataByHours([
      'params' => new CronParams([
        'fromTime' => strtotime('2017-01-01'),
      ]),
    ]);
    $handler->run();

    $data = (new Query())
      ->select([
        'count_rebills_date_by_date' => new Expression('SUM(count_rebills_date_by_date)'),
        'sum_profit_rub_date_by_date' => new Expression('SUM(sum_profit_rub_date_by_date)'),
        'sum_profit_usd_date_by_date' => new Expression('SUM(sum_profit_usd_date_by_date)'),
        'sum_profit_eur_date_by_date' => new Expression('SUM(sum_profit_eur_date_by_date)'),
      ])
      ->from('statistic_data_hour_group')
      ->andWhere(['is_cpa' => 1])
      ->one();
    // с флагом is_cpa=1 уже нули
    $this->assertEquals(0, $data['count_rebills_date_by_date'], 'Ребиллы некорректно посчитались');
    $this->assertEquals(0, $data['sum_profit_rub_date_by_date'], 'Профиты некорректно посчитались');
    $this->assertEquals(0, $data['sum_profit_usd_date_by_date'], 'Профиты некорректно посчитались');
    $this->assertEquals(0, $data['sum_profit_eur_date_by_date'], 'Профиты некорректно посчитались');

    $data = (new Query())
      ->select([
        'count_rebills_date_by_date' => new Expression('SUM(count_rebills_date_by_date)'),
        'sum_profit_rub_date_by_date' => new Expression('SUM(sum_profit_rub_date_by_date)'),
        'sum_profit_usd_date_by_date' => new Expression('SUM(sum_profit_usd_date_by_date)'),
        'sum_profit_eur_date_by_date' => new Expression('SUM(sum_profit_eur_date_by_date)'),
      ])
      ->from('statistic_data_hour_group')
      ->andWhere(['is_cpa' => 0])
      ->one();
    // те же значения сохранились, но в БД лежит с флагом is_cpa=0 уже
    $this->assertEquals(2, $data['count_rebills_date_by_date'], 'Ребиллы некорректно посчитались');
    $this->assertEquals(240, $data['sum_profit_rub_date_by_date'], 'Профиты некорректно посчитались');
    $this->assertEquals(4, $data['sum_profit_usd_date_by_date'], 'Профиты некорректно посчитались');
    $this->assertEquals(3.8, $data['sum_profit_eur_date_by_date'], 'Профиты некорректно посчитались');
  }

  private function truncate()
  {
    Yii::$app->db->createCommand('TRUNCATE TABLE statistic_data_hour_group')->execute();
  }
}